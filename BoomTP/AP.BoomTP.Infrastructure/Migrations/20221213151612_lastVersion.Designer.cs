// <auto-generated />
using System;
using AP.BoomTP.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AP.BoomTP.Infrastructure.Migrations
{
    [DbContext(typeof(BoomTPContext))]
    [Migration("20221213151612_lastVersion")]
    partial class lastVersion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AP.BoomTP.Domain.GrowSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GrowSite");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.ScheduleTask", b =>
                {
                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("TasksId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("ScheduleTask");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TaskTime")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.TreeSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreeSpecies");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GrowSiteId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreeSpeciesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrowSiteId");

                    b.HasIndex("TreeSpeciesId");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("TasksTreeSpecies", b =>
                {
                    b.Property<int>("TasksId")
                        .HasColumnType("int");

                    b.Property<int>("TreeSpeciesId")
                        .HasColumnType("int");

                    b.HasKey("TasksId", "TreeSpeciesId");

                    b.HasIndex("TreeSpeciesId");

                    b.ToTable("TasksTreeSpecies");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.Schedule", b =>
                {
                    b.HasOne("AP.BoomTP.Domain.User", "User")
                        .WithMany("Schedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP.BoomTP.Domain.Zone", "Zone")
                        .WithMany("Schedules")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.ScheduleTask", b =>
                {
                    b.HasOne("AP.BoomTP.Domain.Schedule", "Schedule")
                        .WithMany("ScheduleTask")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP.BoomTP.Domain.Tasks", "Tasks")
                        .WithMany("SchedulesStatus")
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.Zone", b =>
                {
                    b.HasOne("AP.BoomTP.Domain.GrowSite", "GrowSite")
                        .WithMany("Zones")
                        .HasForeignKey("GrowSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP.BoomTP.Domain.TreeSpecies", "TreeSpecies")
                        .WithMany("Zones")
                        .HasForeignKey("TreeSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrowSite");

                    b.Navigation("TreeSpecies");
                });

            modelBuilder.Entity("TasksTreeSpecies", b =>
                {
                    b.HasOne("AP.BoomTP.Domain.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP.BoomTP.Domain.TreeSpecies", null)
                        .WithMany()
                        .HasForeignKey("TreeSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AP.BoomTP.Domain.GrowSite", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.Schedule", b =>
                {
                    b.Navigation("ScheduleTask");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.Tasks", b =>
                {
                    b.Navigation("SchedulesStatus");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.TreeSpecies", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.User", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("AP.BoomTP.Domain.Zone", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
